apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: loki-backend
  namespace: default
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: backend
  maxUnavailable: 1
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: loki-read
  namespace: default
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: read
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: read
  maxUnavailable: 1
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: loki-write
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: write
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: write
  maxUnavailable: 1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-grafana-agent-operator
  labels:
    app.kubernetes.io/name: grafana-agent-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: operator
    helm.sh/chart: grafana-agent-operator-0.2.3
    app.kubernetes.io/version: 0.25.1
rules:
- apiGroups:
  - v1
  resources:
  - pods
  verbs:
  - get
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki-canary
  namespace: default
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: canary
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-loki-grafana-agent
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki
  namespace: default
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-runtime
  namespace: default
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
data:
  runtime-config.yaml: '

    {}

    '
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-grafana-agent-operator
  labels:
    app.kubernetes.io/name: grafana-agent-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: operator
    helm.sh/chart: grafana-agent-operator-0.2.3
    app.kubernetes.io/version: 0.25.1
rules:
- apiGroups:
  - monitoring.grafana.com
  resources:
  - grafanaagents
  - metricsinstances
  - logsinstances
  - podlogs
  - integrations
  verbs:
  - get
- apiGroups:
  - monitoring.grafana.com
  resources:
  - grafanaagents/finalizers
  - metricsinstances/finalizers
  - logsinstances/finalizers
  - podlogs/finalizers
  - integrations/finalizers
  verbs:
  - get
- apiGroups:
  - monitoring.coreos.com
  resources:
  - podmonitors
  - probes
  - servicemonitors
  verbs:
  - get
- apiGroups:
  - monitoring.coreos.com
  resources:
  - podmonitors/finalizers
  - probes/finalizers
  - servicemonitors/finalizers
  verbs:
  - get
- apiGroups:
  - v1
  resources:
  - namespaces
  - nodes
  verbs:
  - get
- apiGroups:
  - apps
  resources:
  - statefulsets
  - daemonsets
  - deployments
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-loki-grafana-agent
rules:
- apiGroups:
  - ''
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  - /metrics/cadvisor
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-grafana-agent-operator
  labels:
    app.kubernetes.io/name: grafana-agent-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: operator
    helm.sh/chart: grafana-agent-operator-0.2.3
    app.kubernetes.io/version: 0.25.1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-grafana-agent-operator
subjects:
- kind: ServiceAccount
  name: release-name-grafana-agent-operator
  namespace: default
rules:
- apiGroups:
  - v1
  resources:
  - pods
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-loki-grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-loki-grafana-agent
subjects:
- kind: ServiceAccount
  name: release-name-loki-grafana-agent
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: loki-backend-headless
  namespace: default
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: backend
    prometheus.io/service-monitor: 'false'
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http-metrics
    port: 3100
    targetPort: http-metrics
    protocol: TCP
  - name: grpc
    port: 9095
    targetPort: grpc
    protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: backend
---
apiVersion: v1
kind: Service
metadata:
  name: loki-backend
  namespace: default
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 3100
    targetPort: http-metrics
    protocol: TCP
  - name: grpc
    port: 9095
    targetPort: grpc
    protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: backend
---
apiVersion: v1
kind: Service
metadata:
  name: loki-gateway
  namespace: default
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: gateway
---
apiVersion: v1
kind: Service
metadata:
  name: loki-canary
  namespace: default
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: canary
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 3500
    targetPort: http-metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: canary
---
apiVersion: v1
kind: Service
metadata:
  name: loki-read-headless
  namespace: default
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: read
    prometheus.io/service-monitor: 'false'
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http-metrics
    port: 3100
    targetPort: http-metrics
    protocol: TCP
  - name: grpc
    port: 9095
    targetPort: grpc
    protocol: TCP
    appProtocol: tcp
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: read
---
apiVersion: v1
kind: Service
metadata:
  name: loki-read
  namespace: default
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: read
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 3100
    targetPort: http-metrics
    protocol: TCP
  - name: grpc
    port: 9095
    targetPort: grpc
    protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: read
---
apiVersion: v1
kind: Service
metadata:
  name: loki-write-headless
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: write
    prometheus.io/service-monitor: 'false'
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http-metrics
    port: 3100
    targetPort: http-metrics
    protocol: TCP
  - name: grpc
    port: 9095
    targetPort: grpc
    protocol: TCP
    appProtocol: tcp
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: write
---
apiVersion: v1
kind: Service
metadata:
  name: loki-write
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: write
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 3100
    targetPort: http-metrics
    protocol: TCP
  - name: grpc
    port: 9095
    targetPort: grpc
    protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: write
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: loki-canary
  namespace: test-ns
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: canary
    app: MyApp
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: canary
  template:
    metadata:
      annotations: null
      labels:
        app.kubernetes.io/name: MyApp
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: canary
        app: MyApp
    spec:
      serviceAccountName: loki-canary
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
      - name: loki-canary
        image: docker.io/grafana/loki-canary:2.8.2
        imagePullPolicy: IfNotPresent
        args:
        - -addr=loki-gateway.default.svc.cluster.local.
        - -labelname=pod
        - -labelvalue=$(POD_NAME)
        - -user=self-monitoring
        - -tenant-id=self-monitoring
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        ports:
        - name: http-metrics
          containerPort: 3500
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        readinessProbe:
          httpGet:
            path: /metrics
            port: http-metrics
          initialDelaySeconds: 15
          timeoutSeconds: 1
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 250m
        livenessProbe:
          exec:
            command:
            - ls
            - /
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-grafana-agent-operator
  labels:
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: operator
    helm.sh/chart: grafana-agent-operator-0.2.3
    app.kubernetes.io/version: 0.25.1
    app: MyApp
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
  namespace: test-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent-operator
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: MyApp
        app.kubernetes.io/instance: release-name
        app: MyApp
      annotations:
        container.apparmor.security.beta.kubernetes.io/grafana-agent-operator: runtime/default
    spec:
      serviceAccountName: release-name-grafana-agent-operator
      containers:
      - name: grafana-agent-operator
        image: docker.io/grafana/agent-operator:v0.25.1
        imagePullPolicy: IfNotPresent
        args:
        - --kubelet-service=default/kubelet
        securityContext:
          capabilities:
            drop:
            - ALL
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 25000
          runAsGroup: 25000
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 250m
        readinessProbe:
          exec:
            command:
            - ls
            - /
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - ls
            - /
          initialDelaySeconds: 30
          periodSeconds: 10
      securityContext:
        seccompProfile:
          type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-gateway
  namespace: test-ns
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
    app: MyApp
  annotations: null
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: gateway
  template:
    metadata:
      annotations:
        checksum/config: 98d56cffed981649ea3d1c73015acb14e6898bd76e4617a6026a1ff2838d028a
      labels:
        app.kubernetes.io/name: MyApp
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: gateway
        app: MyApp
    spec:
      serviceAccountName: loki
      enableServiceLinks: true
      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      terminationGracePeriodSeconds: 30
      containers:
      - name: nginx
        image: docker.io/nginxinc/nginx-unprivileged:1.19-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 15
          timeoutSeconds: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: config
          mountPath: /etc/nginx
        - name: tmp
          mountPath: /tmp
        - name: docker-entrypoint-d-override
          mountPath: /docker-entrypoint.d
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 250m
        livenessProbe:
          exec:
            command:
            - ls
            - /
          initialDelaySeconds: 30
          periodSeconds: 10
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: loki
                app.kubernetes.io/instance: release-name
                app.kubernetes.io/component: gateway
            topologyKey: kubernetes.io/hostname
      volumes:
      - name: config
        configMap:
          name: loki-gateway
      - name: tmp
        emptyDir: {}
      - name: docker-entrypoint-d-override
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-read
  namespace: test-ns
  labels:
    app.kubernetes.io/part-of: memberlist
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: read
    app: MyApp
  annotations: null
spec:
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: read
  template:
    metadata:
      annotations:
        checksum/config: d5a77c3e4211a848b59b712a040f604294ee518d0ea1e74e55f169f4f6f6f059
      labels:
        app.kubernetes.io/part-of: memberlist
        app.kubernetes.io/name: MyApp
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: read
        app: MyApp
    spec:
      serviceAccountName: loki
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
      - name: loki
        image: docker.io/grafana/loki:2.8.2
        imagePullPolicy: IfNotPresent
        args:
        - -config.file=/etc/loki/config/config.yaml
        - -target=read
        - -legacy-read-mode=false
        - -common.compactor-grpc-address=loki-backend.default.svc.cluster.local:9095
        ports:
        - name: http-metrics
          containerPort: 3100
          protocol: TCP
        - name: grpc
          containerPort: 9095
          protocol: TCP
        - name: http-memberlist
          containerPort: 7946
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 30
          timeoutSeconds: 1
        volumeMounts:
        - name: config
          mountPath: /etc/loki/config
        - name: runtime-config
          mountPath: /etc/loki/runtime-config
        - name: tmp
          mountPath: /tmp
        - name: data
          mountPath: /var/loki
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 250m
        livenessProbe:
          exec:
            command:
            - ls
            - /
          initialDelaySeconds: 30
          periodSeconds: 10
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: loki
                app.kubernetes.io/instance: release-name
                app.kubernetes.io/component: read
            topologyKey: kubernetes.io/hostname
      volumes:
      - name: tmp
        emptyDir: {}
      - name: data
        emptyDir: {}
      - name: config
        configMap:
          name: loki
          items:
          - key: config.yaml
            path: config.yaml
      - name: runtime-config
        configMap:
          name: loki-runtime
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki-backend
  namespace: test-ns
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: memberlist
    app: MyApp
  annotations: null
spec:
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: loki-backend-headless
  revisionHistoryLimit: 10
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Delete
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: backend
  template:
    metadata:
      annotations:
        checksum/config: d5a77c3e4211a848b59b712a040f604294ee518d0ea1e74e55f169f4f6f6f059
      labels:
        app.kubernetes.io/name: MyApp
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: memberlist
        app: MyApp
    spec:
      serviceAccountName: loki
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
      - name: loki
        image: docker.io/grafana/loki:2.8.2
        imagePullPolicy: IfNotPresent
        args:
        - -config.file=/etc/loki/config/config.yaml
        - -target=backend
        - -legacy-read-mode=false
        ports:
        - name: http-metrics
          containerPort: 3100
          protocol: TCP
        - name: grpc
          containerPort: 9095
          protocol: TCP
        - name: http-memberlist
          containerPort: 7946
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 30
          timeoutSeconds: 1
        volumeMounts:
        - name: config
          mountPath: /etc/loki/config
        - name: runtime-config
          mountPath: /etc/loki/runtime-config
        - name: tmp
          mountPath: /tmp
        - name: data
          mountPath: /var/loki
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 250m
        livenessProbe:
          exec:
            command:
            - ls
            - /
          initialDelaySeconds: 30
          periodSeconds: 10
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: loki
                app.kubernetes.io/instance: release-name
                app.kubernetes.io/component: backend
            topologyKey: kubernetes.io/hostname
      volumes:
      - name: tmp
        emptyDir: {}
      - name: config
        configMap:
          name: loki
          items:
          - key: config.yaml
            path: config.yaml
      - name: runtime-config
        configMap:
          name: loki-runtime
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki-write
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: write
    app.kubernetes.io/part-of: memberlist
    app: MyApp
  annotations: null
  namespace: test-ns
spec:
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: loki-write-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: write
  template:
    metadata:
      annotations:
        checksum/config: d5a77c3e4211a848b59b712a040f604294ee518d0ea1e74e55f169f4f6f6f059
      labels:
        app.kubernetes.io/name: MyApp
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: write
        app.kubernetes.io/part-of: memberlist
        app: MyApp
    spec:
      automountServiceAccountToken: true
      enableServiceLinks: true
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
      - name: loki
        image: docker.io/grafana/loki:2.8.2
        imagePullPolicy: IfNotPresent
        args:
        - -config.file=/etc/loki/config/config.yaml
        - -target=write
        ports:
        - name: http-metrics
          containerPort: 3100
          protocol: TCP
        - name: grpc
          containerPort: 9095
          protocol: TCP
        - name: http-memberlist
          containerPort: 7946
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 30
          timeoutSeconds: 1
        volumeMounts:
        - name: config
          mountPath: /etc/loki/config
        - name: runtime-config
          mountPath: /etc/loki/runtime-config
        - name: data
          mountPath: /var/loki
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 250m
        livenessProbe:
          exec:
            command:
            - ls
            - /
          initialDelaySeconds: 30
          periodSeconds: 10
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: loki
                app.kubernetes.io/instance: release-name
                app.kubernetes.io/component: write
            topologyKey: kubernetes.io/hostname
      volumes:
      - name: config
        configMap:
          name: loki
          items:
          - key: config.yaml
            path: config.yaml
      - name: runtime-config
        configMap:
          name: loki-runtime
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
---
apiVersion: monitoring.grafana.com/v1alpha1
kind: GrafanaAgent
metadata:
  name: release-name-loki
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
spec:
  serviceAccountName: release-name-loki-grafana-agent
  enableConfigReadAPI: false
  logs:
    instanceSelector:
      matchLabels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: release-name
---
apiVersion: monitoring.grafana.com/v1alpha1
kind: LogsInstance
metadata:
  name: release-name-loki
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
spec:
  clients:
  - url: http://loki-gateway.default.svc.cluster.local/loki/api/v1/push
    externalLabels:
      cluster: release-name-loki
    tenantId: self-monitoring
  podLogsNamespaceSelector: {}
  podLogsSelector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
---
apiVersion: monitoring.grafana.com/v1alpha1
kind: PodLogs
metadata:
  name: release-name-loki
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
spec:
  pipelineStages:
  - cri: {}
  relabelings:
  - sourceLabels:
    - __meta_kubernetes_pod_node_name
    targetLabel: __host__
  - action: labelmap
    regex: __meta_kubernetes_pod_label_(.+)
  - action: replace
    replacement: $1
    separator: '-'
    sourceLabels:
    - __meta_kubernetes_pod_label_app_kubernetes_io_name
    - __meta_kubernetes_pod_label_app_kubernetes_io_component
    targetLabel: __service__
  - action: replace
    replacement: $1
    separator: /
    sourceLabels:
    - __meta_kubernetes_namespace
    - __service__
    targetLabel: job
  - action: replace
    sourceLabels:
    - __meta_kubernetes_pod_container_name
    targetLabel: container
  - replacement: release-name-loki
    targetLabel: cluster
  namespaceSelector:
    matchNames:
    - default
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-agent-test-sa
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-agent-test-cr
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
rules:
- apiGroups:
  - ''
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  - /metrics/cadvisor
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-agent-test-crb
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent-test-cr
subjects:
- kind: ServiceAccount
  name: grafana-agent-test-sa
  namespace: default
---
apiVersion: v1
kind: Deployment
metadata:
  name: grafana-agent-test-probe
  annotations:
    helm.sh/hook: test
    helm.sh/hook-weight: '1'
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
    container.apparmor.security.beta.kubernetes.io/busybox: runtime/default
    container.apparmor.security.beta.kubernetes.io/sleep: runtime/default
  labels:
    app: MyApp
    app.kubernetes.io/name: MyApp
  namespace: test-ns
spec:
  containers:
  - name: busybox
    image: busybox:1.36
    imagePullPolicy: IfNotPresent
    command:
    - wget
    args:
    - grafana-agent-test-operated:8080/-/healthy
    securityContext:
      capabilities:
        drop:
        - ALL
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
    resources:
      limits:
        memory: 128Mi
        cpu: 250m
      requests:
        memory: 128Mi
        cpu: 250m
  initContainers:
  - name: sleep
    image: busybox:1.36
    imagePullPolicy: IfNotPresent
    command:
    - sleep
    - '60'
  restartPolicy: Never
  securityContext:
    seccompProfile:
      type: RuntimeDefault
  metadata:
    labels:
      app: MyApp
      app.kubernetes.io/name: MyApp
---
apiVersion: v1
kind: Deployment
metadata:
  name: loki-helm-test
  namespace: test-ns
  labels:
    helm.sh/chart: loki-5.6.3
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.8.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: helm-test
    app: MyApp
  annotations:
    helm.sh/hook: test
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
    container.apparmor.security.beta.kubernetes.io/loki-helm-test: runtime/default
spec:
  containers:
  - name: loki-helm-test
    image: docker.io/grafana/loki-helm-test:canary-test-3d3c570-WIP
    env:
    - name: CANARY_PROMETHEUS_ADDRESS
      value: http://prometheus:9090
    - name: CANARY_TEST_TIMEOUT
      value: 1m
    args:
    - -test.v
    securityContext:
      capabilities:
        drop:
        - ALL
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
    resources:
      limits:
        memory: 128Mi
        cpu: 250m
      requests:
        memory: 128Mi
        cpu: 250m
  restartPolicy: Never
  securityContext:
    seccompProfile:
      type: RuntimeDefault
  metadata:
    labels:
      app: MyApp
---
apiVersion: monitoring.grafana.com/v1alpha1
kind: GrafanaAgent
metadata:
  name: grafana-agent-test
  labels:
    app: grafana-agent-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
spec:
  image: docker.io/grafana/agent:v0.25.1
  logLevel: info
  serviceAccountName: grafana-agent-test-sa
  metrics:
    instanceSelector:
      matchLabels:
        agent: grafana-agent-test
---
apiVersion: monitoring.grafana.com/v1alpha1
kind: MetricsInstance
metadata:
  name: primary-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
  labels:
    agent: grafana-agent-test
spec: {}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
