apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: test-ns
type: Opaque
data:
  postgresql-postgres-password: akJzNTVDaVJJSw==
  postgresql-password: c29uYXJQYXNz
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-sonarqube-monitoring-passcode
  labels:
    app: sonarqube
    release: release-name
    heritage: Helm
  namespace: test-ns
type: Opaque
data:
  SONAR_WEB_SYSTEMPASSCODE: ZGVmaW5lX2l0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-config
  labels:
    app: sonarqube
    release: release-name
    heritage: Helm
  namespace: test-ns
data:
  sonar.properties: ''
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-init-fs
  labels:
    app: sonarqube
    release: release-name
    heritage: Helm
  namespace: test-ns
data:
  init_fs.sh: ''
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-init-sysctl
  labels:
    app: sonarqube
    release: release-name
    heritage: Helm
  namespace: test-ns
data:
  init_sysctl.sh: "if [[ \"$(sysctl -n vm.max_map_count)\" -lt 524288 ]]; then\n \
    \ sysctl -w vm.max_map_count=524288\nfi\nif [[ \"$(sysctl -n fs.file-max)\" -lt\
    \ 131072 ]]; then\n  sysctl -w fs.file-max=131072\nfi\nif [[ \"$(ulimit -n)\"\
    \ != \"unlimited\" ]]; then\n  if [[ \"$(ulimit -n)\" -lt 131072 ]]; then\n  \
    \  echo \"ulimit -n 131072\"\n    ulimit -n 131072\n  fi\nfi\nif [[ \"$(ulimit\
    \ -u)\" != \"unlimited\" ]]; then\n  if [[ \"$(ulimit -u)\" -lt 8192 ]]; then\n\
    \    echo \"ulimit -u 8192\"\n    ulimit -u 8192\n  fi\nfi"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-install-plugins
  labels:
    app: sonarqube
    release: release-name
    heritage: Helm
  namespace: test-ns
data:
  install_plugins.sh: ''
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-jdbc-config
  labels:
    app: sonarqube
    release: release-name
    heritage: Helm
  namespace: test-ns
data:
  SONAR_JDBC_USERNAME: sonarUser
  SONAR_JDBC_URL: jdbc:postgresql://release-name-postgresql:5432/sonarDB
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-tests
  labels:
    app: sonarqube
    release: release-name
    heritage: Helm
  namespace: test-ns
data:
  run.sh: "@test \"Testing Sonarqube UI is accessible\" {\n  curl --connect-timeout\
    \ 5 --retry 12 --retry-delay 1 --retry-max-time 60 release-name-sonarqube:9000/api/system/status\n\
    }"
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    service: postgresql-headless
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
  namespace: test-ns
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
  namespace: test-ns
spec:
  type: ClusterIP
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
  namespace: test-ns
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      service: postgresql-headless
      app.kubernetes.io/name: postgresql
      helm.sh/chart: postgresql-10.15.0
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/component: primary
      role: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.15.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
      annotations:
        container.apparmor.security.beta.kubernetes.io/release-name-postgresql: runtime/default
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: postgresql
                  app.kubernetes.io/instance: release-name
                  app.kubernetes.io/component: primary
              namespaces:
              - default
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
        runAsUser: 25000
        seccompProfile:
          type: RuntimeDefault
      automountServiceAccountToken: false
      containers:
      - name: release-name-postgresql
        image: docker.io/bitnami/postgresql:11.14.0-debian-10-r22
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          runAsUser: 25000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: POSTGRESQL_PORT_NUMBER
          value: '5432'
        - name: POSTGRESQL_VOLUME_DIR
          value: /bitnami/postgresql
        - name: PGDATA
          value: /bitnami/postgresql/data
        - name: POSTGRES_USER
          value: sonarUser
        - name: POSTGRES_DB
          value: sonarDB
        - name: POSTGRESQL_ENABLE_LDAP
          value: 'no'
        - name: POSTGRESQL_ENABLE_TLS
          value: 'no'
        - name: POSTGRESQL_LOG_HOSTNAME
          value: 'false'
        - name: POSTGRESQL_LOG_CONNECTIONS
          value: 'false'
        - name: POSTGRESQL_LOG_DISCONNECTIONS
          value: 'false'
        - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
          value: 'off'
        - name: POSTGRESQL_CLIENT_MIN_MESSAGES
          value: error
        - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
          value: pgaudit
        ports:
        - name: tcp-postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - 'exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p
              5432

              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized
              ]

              '
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: dshm
          mountPath: /dev/shm
          readOnly: true
        - name: data
          mountPath: /bitnami/postgresql
          subPath: null
          readOnly: true
        - name: secret-volume
          readOnly: true
          mountPath: /etc/secret-volume
        - name: secret-volume
          readOnly: true
          mountPath: /etc/secret-volume
      volumes:
      - name: dshm
        emptyDir:
          medium: Memory
      - name: secret-volume
        secret:
          secretName: my-secret
      - name: secret-volume
        secret:
          secretName: my-secret
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-sonarqube
  labels:
    app: sonarqube
    release: release-name
    heritage: Helm
    app.kubernetes.io/name: sonarqube-release-name-sonarqube
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sonarqube
    app.kubernetes.io/component: release-name-sonarqube
    app.kubernetes.io/version: 10.0.0-community
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
  namespace: test-ns
spec:
  replicas: 1
  serviceName: release-name-postgresql-headless
  selector:
    matchLabels:
      app: sonarqube
      release: release-name
  template:
    metadata:
      labels:
        app: sonarqube
        release: release-name
      annotations:
        checksum/init-sysctl: 88f22fab3f802f1cb0b44a0b552ecbf49da41abca396a956f26e1f7294c76cf4
        checksum/init-fs: a0b20ec5d368e29355e1b9f35c4dd6091382c564460e30e4c181928e8b143bde
        checksum/plugins: 99a8112ab1d472f61abe82a1e7c31566485f0db8fa4ddb179ccd3d1a06a38df3
        checksum/config: 2b7db64fa2340964bc9e37e7e44ca79eef1d394418e8064be89d4e589eb819d2
        checksum/secret: 34e253aa9afd72e3938f5419bf1ad86ce109ce8212d244a97ecd1174bbe174bd
        container.apparmor.security.beta.kubernetes.io/sonarqube: runtime/default
        container.apparmor.security.beta.kubernetes.io/wait-for-db: runtime/default
        container.apparmor.security.beta.kubernetes.io/init-sysctl: runtime/default
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 25000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: wait-for-db
        image: busybox:1-uclibc@sha256:3dcd6bcb75d6ca5b23642482809ea3dbba4de07d277326454f443b9dcb14b012
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 250m
            memory: 128Mi
          requests:
            cpu: 250m
            memory: 128Mi
        command:
        - /bin/sh
        - -c
        - for i in $(seq 1 200); do nc -z -w3 release-name-postgresql 5432 && exit
          0 || sleep 2; done; exit 1
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 25000
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsGroup: 25000
          readOnlyRootFilesystem: true
      - name: init-sysctl
        image: busybox:1-uclibc@sha256:3dcd6bcb75d6ca5b23642482809ea3dbba4de07d277326454f443b9dcb14b012
        imagePullPolicy: Always
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          runAsUser: 25000
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        resources:
          limits:
            cpu: 250m
            memory: 128Mi
          requests:
            cpu: 250m
            memory: 128Mi
        command:
        - sh
        - -e
        - /tmp/scripts/init_sysctl.sh
        volumeMounts:
        - name: init-sysctl
          mountPath: /tmp/scripts/
      containers:
      - name: sonarqube
        image: sonarqube:datacenter-search@sha256:d1c1e4561863f74ce6a50bd154017f4cf41567f628e2b26838ad1ff4d4c70016
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 9000
          protocol: TCP
        resources:
          limits:
            cpu: 400m
            memory: 2Gi
          requests:
            cpu: 400m
            memory: 2Gi
        env:
        - name: SONAR_WEB_JAVAOPTS
          value: null
        - name: SONAR_CE_JAVAOPTS
          value: null
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - 'host="$(hostname -i || echo ''127.0.0.1'')"

              reply=$(wget --no-proxy -qO- --header="X-Sonar-Passcode: $SONAR_WEB_SYSTEMPASSCODE"
              http://${host}:9000/api/system/liveness 2>&1)

              if [ -z "$reply" ]; then exit 0; else exit 1; fi

              '
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 6
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "#!/bin/bash\n# A Sonarqube container is considered ready if the status\
              \ is UP, DB_MIGRATION_NEEDED or DB_MIGRATION_RUNNING\n# status about\
              \ migration are added to prevent the node to be kill while sonarqube\
              \ is upgrading the database.\nhost=\"$(hostname -i || echo '127.0.0.1')\"\
              \nif wget --no-proxy -qO- http://${host}:9000/api/system/status | grep\
              \ -q -e '\"status\":\"UP\"' -e '\"status\":\"DB_MIGRATION_NEEDED\"'\
              \ -e '\"status\":\"DB_MIGRATION_RUNNING\"'; then\n\texit 0\nfi\nexit\
              \ 1\n"
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 6
          timeoutSeconds: 1
        startupProbe:
          httpGet:
            scheme: HTTP
            path: /api/system/status
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 24
          timeoutSeconds: 1
        securityContext:
          runAsUser: 25000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /opt/sonarqube/data
          name: sonarqube
          subPath: data
        - mountPath: /opt/sonarqube/temp
          name: sonarqube
          subPath: temp
        - mountPath: /opt/sonarqube/logs
          name: sonarqube
          subPath: logs
        - mountPath: /tmp
          name: tmp-dir
        - name: secret-volume
          readOnly: true
          mountPath: /etc/secret-volume
        - name: secret-volume
          readOnly: true
          mountPath: /etc/secret-volume
      serviceAccountName: default
      volumes:
      - name: init-sysctl
        configMap:
          name: release-name-sonarqube-init-sysctl
          items:
          - key: init_sysctl.sh
            path: init_sysctl.sh
      - name: init-fs
        configMap:
          name: release-name-sonarqube-init-fs
          items:
          - key: init_fs.sh
            path: init_fs.sh
      - name: install-plugins
        configMap:
          name: release-name-sonarqube-install-plugins
          items:
          - key: install_plugins.sh
            path: install_plugins.sh
      - name: sonarqube
        emptyDir: {}
      - name: tmp-dir
        emptyDir: {}
      - name: secret-volume
        secret:
          secretName: my-secret
      - name: secret-volume
        secret:
          secretName: my-secret
      automountServiceAccountToken: false
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-ui-test
  annotations:
    helm.sh/hook: test-success
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
    container.apparmor.security.beta.kubernetes.io/release-name-ui-test: runtime/default
    container.apparmor.security.beta.kubernetes.io/bats: runtime/default
  labels:
    app: sonarqube
    release: release-name
    heritage: Helm
  namespace: test-ns
spec:
  initContainers:
  - name: bats
    image: bats/bats:1.2.1
    imagePullPolicy: Always
    command:
    - bash
    - -c
    args:
    - 'set -ex

      cp -R /opt/bats /tools/bats/'
    resources:
      limits:
        cpu: 250m
        memory: 128Mi
      requests:
        cpu: 250m
        memory: 128Mi
    volumeMounts:
    - mountPath: /tools
      name: tools
    securityContext:
      allowPrivilegeEscalation: false
      runAsUser: 25000
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsGroup: 25000
      readOnlyRootFilesystem: true
  containers:
  - name: release-name-ui-test
    image: bitnami/minideb-extras
    imagePullPolicy: IfNotPresent
    command:
    - /tools/bats/bin/bats
    - --tap
    - /tests/run.sh
    resources:
      limits:
        cpu: 250m
        memory: 128Mi
      requests:
        cpu: 250m
        memory: 128Mi
    volumeMounts:
    - mountPath: /tests
      name: tests
      readOnly: true
    - mountPath: /tools
      name: tools
    securityContext:
      allowPrivilegeEscalation: false
      runAsUser: 25000
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsGroup: 25000
      readOnlyRootFilesystem: true
    readinessProbe:
      exec:
        command:
        - ls
        - /
      initialDelaySeconds: 30
      periodSeconds: 10
    livenessProbe:
      exec:
        command:
        - ls
        - /
      initialDelaySeconds: 30
      periodSeconds: 10
  volumes:
  - name: tests
    configMap:
      name: release-name-sonarqube-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never
  securityContext:
    runAsUser: 25000
    seccompProfile:
      type: RuntimeDefault
    runAsNonRoot: true
    runAsGroup: 25000
  serviceAccountName: SAtest0
  automountServiceAccountToken: false
---
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-min-max-demo-lr
  namespace: test-ns
spec:
  limits:
  - max:
      cpu: 800m
    min:
      cpu: 250m
    type: Container
---
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-min-max-demo-lr
  namespace: default
spec:
  limits:
  - max:
      cpu: 800m
    min:
      cpu: 250m
    type: Container
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pods-high
  namespace: test-ns
spec:
  hard:
    cpu: '1000'
    memory: 200Gi
    pods: '10'
  scopeSelector:
    matchExpressions:
    - operator: In
      scopeName: PriorityClass
      values:
      - high
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pods-high
  namespace: default
spec:
  hard:
    cpu: '1000'
    memory: 200Gi
    pods: '10'
  scopeSelector:
    matchExpressions:
    - operator: In
      scopeName: PriorityClass
      values:
      - high
