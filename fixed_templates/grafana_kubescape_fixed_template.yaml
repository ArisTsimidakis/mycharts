apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
  name: release-name-grafana
  namespace: default
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  admin-user: YWRtaW4=
  admin-password: NGU0SnQ1ek1FRWJtcEYzeTg4Y2V3T01kck5jQUJxbTZNcExnZnU4YQ==
  ldap-toml: ''
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
data:
  grafana.ini: '[analytics]

    check_for_updates = true

    [grafana_net]

    url = https://grafana.net

    [log]

    mode = console

    [paths]

    data = /var/lib/grafana/

    logs = /var/log/grafana

    plugins = /var/lib/grafana/plugins

    provisioning = /etc/grafana/provisioning

    [server]

    domain = ''''

    '
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
  name: release-name-grafana-clusterrole
rules: []
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: release-name-grafana
  namespace: default
roleRef:
  kind: ClusterRole
  name: release-name-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-grafana
subjects:
- kind: ServiceAccount
  name: release-name-grafana
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: service
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-grafana
  namespace: test-ns
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
    app: MyApp
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: release-name
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: MyApp
        app.kubernetes.io/instance: release-name
        app: MyApp
      annotations:
        checksum/config: d333364bb25cb54bf9220cecf6054668f80e92d6951adffbaa46a9d2b0de0a3d
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 0e47b6103a18340b4dca64ce4ff8502b0b37bd3dd8e5b478737ff9f7f1e71a9d
        kubectl.kubernetes.io/default-container: grafana
    spec:
      serviceAccountName: release-name-grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      enableServiceLinks: true
      containers:
      - name: grafana
        image: docker.io/grafana/grafana:9.5.2
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: storage
          mountPath: /var/lib/grafana
        ports:
        - name: grafana
          containerPort: 3000
          protocol: TCP
        - name: gossip-tcp
          containerPort: 9094
          protocol: TCP
        - name: gossip-udp
          containerPort: 9094
          protocol: UDP
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: release-name-grafana
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-grafana
              key: admin-password
        - name: GF_PATHS_DATA
          value: /var/lib/grafana/
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 250m
      volumes:
      - name: config
        configMap:
          name: release-name-grafana
      - name: storage
        emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
  name: release-name-grafana-test
  namespace: default
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-grafana-test
  namespace: default
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: "@test \"Test Health\" {\n  url=\"http://release-name-grafana/api/health\"\
    \n\n  code=$(wget --server-response --spider --timeout 90 --tries 10 ${url} 2>&1\
    \ | awk '/^  HTTP/{print $2}')\n  [ \"$code\" == \"200\" ]\n}"
---
apiVersion: v1
kind: Deployment
metadata:
  name: release-name-grafana-test
  labels:
    helm.sh/chart: grafana-6.57.0
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 9.5.2
    app.kubernetes.io/managed-by: Helm
    app: MyApp
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  namespace: test-ns
spec:
  serviceAccountName: release-name-grafana-test
  containers:
  - name: release-name-test
    image: docker.io/bats/bats:v1.4.1
    imagePullPolicy: IfNotPresent
    command:
    - /opt/bats/bin/bats
    - -t
    - /tests/run.sh
    volumeMounts:
    - mountPath: /tests
      name: tests
      readOnly: true
    readinessProbe:
      exec:
        command:
        - ls
        - /
      initialDelaySeconds: 30
      periodSeconds: 10
    resources:
      limits:
        memory: 128Mi
        cpu: 250m
      requests:
        memory: 128Mi
        cpu: 250m
    livenessProbe:
      exec:
        command:
        - ls
        - /
      initialDelaySeconds: 30
      periodSeconds: 10
    securityContext:
      readOnlyRootFilesystem: true
  volumes:
  - name: tests
    configMap:
      name: release-name-grafana-test
  restartPolicy: Never
  metadata:
    labels:
      app: MyApp
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
