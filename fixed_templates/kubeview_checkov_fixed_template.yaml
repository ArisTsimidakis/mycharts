apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-kubeview
  namespace: test-ns
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-kubeview
rules:
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  - daemonsets
  - statefulsets
  verbs:
  - get
  - list
- apiGroups:
  - ''
  resources:
  - pods
  - configmaps
  - secrets
  - events
  - endpoints
  - namespaces
  - nodes
  - persistentvolumes
  - persistentvolumeclaims
  - resourcequotas
  - services
  verbs:
  - get
  - list
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
- nonResourceURLs:
  - '*'
  verbs:
  - get
  - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-kubeview
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-kubeview
subjects:
- kind: ServiceAccount
  name: release-name-kubeview
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-kubeview
  labels:
    app.kubernetes.io/name: kubeview
    helm.sh/chart: kubeview-0.1.31
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.1.31
    app.kubernetes.io/managed-by: Helm
  namespace: test-ns
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: kubeview
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-kubeview
  labels:
    app.kubernetes.io/name: kubeview
    helm.sh/chart: kubeview-0.1.31
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.1.31
    app.kubernetes.io/managed-by: Helm
  namespace: test-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kubeview
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubeview
        app.kubernetes.io/instance: release-name
      annotations:
        seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
    spec:
      serviceAccountName: release-name-kubeview
      containers:
      - name: kubeview
        image: ghcr.io/benc-uk/kubeview:0.1.31
        imagePullPolicy: Always
        env:
        - name: IN_CLUSTER
          value: 'true'
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 8000
        readinessProbe:
          httpGet:
            path: /
            port: 8000
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          allowPrivilegeEscalation: false
          runAsUser: 25000
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        runAsUser: 25000
        runAsNonRoot: true
      automountServiceAccountToken: false
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-kubeview-test-connection
  labels:
    app.kubernetes.io/name: kubeview
    helm.sh/chart: kubeview-0.1.31
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.1.31
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test-success
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
  namespace: test-ns
spec:
  containers:
  - name: wget
    image: busybox:1.36-musl@sha256:9d2c77b620694c579eefb7161b260d725909d8e63e58e669837867eefc155f3e
    command:
    - wget
    args:
    - release-name-kubeview:80
    securityContext:
      capabilities:
        drop:
        - ALL
      allowPrivilegeEscalation: false
      runAsUser: 25000
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    livenessProbe:
      exec:
        command:
        - ls
        - /
      initialDelaySeconds: 30
      periodSeconds: 10
    resources:
      requests:
        memory: 128Mi
        cpu: 250m
      limits:
        memory: 128Mi
        cpu: 250m
    readinessProbe:
      exec:
        command:
        - ls
        - /
      initialDelaySeconds: 30
      periodSeconds: 10
  restartPolicy: Never
  securityContext:
    seccompProfile:
      type: RuntimeDefault
    runAsUser: 25000
    runAsNonRoot: true
  automountServiceAccountToken: false
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
