apiVersion: v1
kind: Service
metadata:
  name: release-name-nginx
  namespace: default
  labels:
    app.kubernetes.io/name: nginx
    helm.sh/chart: nginx-15.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: Cluster
  ports:
  - name: http
    port: 80
    targetPort: http
  selector:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-nginx
  namespace: test-ns
  labels:
    app.kubernetes.io/name: MyApp
    helm.sh/chart: nginx-15.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app: MyApp
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
spec:
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: MyApp
        helm.sh/chart: nginx-15.0.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app: MyApp
      annotations:
        container.apparmor.security.beta.kubernetes.io/nginx: runtime/default
    spec:
      automountServiceAccountToken: false
      shareProcessNamespace: false
      serviceAccountName: default
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: nginx
                  app.kubernetes.io/instance: release-name
              topologyKey: kubernetes.io/hostname
            weight: 1
      hostNetwork: false
      hostIPC: false
      initContainers: null
      containers:
      - name: nginx
        image: docker.io/bitnami/nginx:1.25.0-debian-11-r1
        imagePullPolicy: IfNotPresent
        env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: NGINX_HTTP_PORT_NUMBER
          value: '8080'
        envFrom: null
        ports:
        - name: http
          containerPort: 8080
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: http
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
          tcpSocket:
            port: http
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests: {}
        volumeMounts: null
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 25000
          runAsGroup: 25000
          readOnlyRootFilesystem: true
      volumes: null
      securityContext:
        seccompProfile:
          type: RuntimeDefault
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
