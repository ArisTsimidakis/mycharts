apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-falco
  namespace: default
  labels:
    helm.sh/chart: falco-3.1.4
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-falco
  namespace: default
  labels:
    helm.sh/chart: falco-3.1.4
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/managed-by: Helm
data:
  falco.yaml: "buffered_outputs: false\nfile_output:\n  enabled: false\n  filename:\
    \ ./events.txt\n  keep_alive: false\ngrpc:\n  bind_address: unix:///run/falco/falco.sock\n\
    \  enabled: false\n  threadiness: 0\ngrpc_output:\n  enabled: false\nhttp_output:\n\
    \  enabled: false\n  url: \"\"\n  user_agent: falcosecurity/falco\njson_include_output_property:\
    \ true\njson_include_tags_property: true\njson_output: false\nlibs_logger:\n \
    \ enabled: false\n  severity: debug\nload_plugins: []\nlog_level: info\nlog_stderr:\
    \ true\nlog_syslog: true\nmetadata_download:\n  chunk_wait_us: 1000\n  max_mb:\
    \ 100\n  watch_freq_sec: 1\nmodern_bpf:\n  cpus_for_each_syscall_buffer: 2\noutput_timeout:\
    \ 2000\noutputs:\n  max_burst: 1000\n  rate: 1\nplugins:\n- init_config: null\n\
    \  library_path: libk8saudit.so\n  name: k8saudit\n  open_params: http://:9765/k8s-audit\n\
    - library_path: libcloudtrail.so\n  name: cloudtrail\n- init_config: \"\"\n  library_path:\
    \ libjson.so\n  name: json\npriority: debug\nprogram_output:\n  enabled: false\n\
    \  keep_alive: false\n  program: 'jq ''{text: .output}'' | curl -d @- -X POST\
    \ https://hooks.slack.com/services/XXX'\nrules_file:\n- /etc/falco/falco_rules.yaml\n\
    - /etc/falco/falco_rules.local.yaml\n- /etc/falco/rules.d\nstdout_output:\n  enabled:\
    \ true\nsyscall_buf_size_preset: 4\nsyscall_event_drops:\n  actions:\n  - log\n\
    \  - alert\n  max_burst: 1\n  rate: 0.03333\n  simulate_drops: false\n  threshold:\
    \ 0.1\nsyscall_event_timeouts:\n  max_consecutives: 1000\nsyslog_output:\n  enabled:\
    \ true\ntime_format_iso_8601: false\nwatch_config_files: true\nwebserver:\n  enabled:\
    \ true\n  k8s_healthz_endpoint: /healthz\n  listen_port: 8765\n  ssl_certificate:\
    \ /etc/falco/falco.pem\n  ssl_enabled: false\n  threadiness: 0"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-falco-falcoctl
  namespace: default
  labels:
    helm.sh/chart: falco-3.1.4
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/managed-by: Helm
data:
  falcoctl.yaml: "artifact:\n  allowedTypes:\n  - rulesfile\n  follow:\n    every:\
    \ 6h\n    falcoversions: http://localhost:8765/versions\n    pluginsDir: /plugins\n\
    \    refs:\n    - falco-rules:0\n    rulesfilesDir: /rulesfiles\n  install:\n\
    \    pluginsDir: /plugins\n    refs:\n    - falco-rules:0\n    resolveDeps: false\n\
    \    rulesfilesDir: /rulesfiles\nindexes:\n- name: falcosecurity\n  url: https://falcosecurity.github.io/falcoctl/index.yaml"
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-falco
  labels:
    helm.sh/chart: falco-3.1.4
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - extensions
  - ''
  resources:
  - nodes
  - namespaces
  - pods
  - replicationcontrollers
  - replicasets
  - services
  - daemonsets
  - deployments
  - events
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /healthz
  - /healthz/*
  verbs:
  - get
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-falco
  labels:
    helm.sh/chart: falco-3.1.4
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: release-name-falco
  namespace: default
roleRef:
  kind: ClusterRole
  name: release-name-falco
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: release-name-falco
  namespace: test-ns
  labels:
    helm.sh/chart: falco-3.1.4
    app.kubernetes.io/name: MyApp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/managed-by: Helm
    app: MyApp
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: falco
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      name: release-name-falco
      labels:
        app.kubernetes.io/name: MyApp
        app.kubernetes.io/instance: release-name
        app: MyApp
      annotations:
        checksum/config: a9f15f4e9c915dc68e01b438570bd6eac85dff4943dc07392e8c978210821c36
        checksum/rules: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/certs: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        container.apparmor.security.beta.kubernetes.io/falco: runtime/default
        container.apparmor.security.beta.kubernetes.io/falcoctl-artifact-follow: runtime/default
    spec:
      serviceAccountName: release-name-falco
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      containers:
      - name: falco
        image: docker.io/falcosecurity/falco-no-driver:0.34.1
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 1000m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 512Mi
        securityContext:
          privileged: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 25000
          runAsGroup: 25000
        args:
        - /usr/bin/falco
        - --cri
        - /run/containerd/containerd.sock
        - --cri
        - /run/crio/crio.sock
        - -K
        - /var/run/secrets/kubernetes.io/serviceaccount/token
        - -k
        - https://$(KUBERNETES_SERVICE_HOST)
        - --k8s-node
        - $(FALCO_K8S_NODE_NAME)
        - -pk
        env:
        - name: FALCO_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        tty: false
        livenessProbe:
          initialDelaySeconds: 60
          timeoutSeconds: 5
          periodSeconds: 15
          httpGet:
            path: /healthz
            port: 8765
        readinessProbe:
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 15
          httpGet:
            path: /healthz
            port: 8765
        volumeMounts:
        - mountPath: /etc/falco
          name: rulesfiles-install-dir
        - mountPath: /root/.falco
          name: root-falco-fs
        - mountPath: /host/proc
          name: proc-fs
        - mountPath: /host/dev
          name: dev-fs
          readOnly: true
        - name: sys-fs
          mountPath: /sys/module/falco
        - mountPath: /host/var/run/docker.sock
          name: docker-socket
        - mountPath: /host/run/containerd/containerd.sock
          name: containerd-socket
        - mountPath: /host/run/crio/crio.sock
          name: crio-socket
        - mountPath: /etc/falco/falco.yaml
          name: falco-yaml
          subPath: falco.yaml
      - name: falcoctl-artifact-follow
        image: docker.io/falcosecurity/falcoctl:0.4.0
        imagePullPolicy: IfNotPresent
        args:
        - artifact
        - follow
        - --verbose
        securityContext:
          capabilities:
            drop:
            - ALL
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 25000
          runAsGroup: 25000
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /plugins
          name: plugins-install-dir
        - mountPath: /rulesfiles
          name: rulesfiles-install-dir
        - mountPath: /etc/falcoctl
          name: falcoctl-config-volume
        env: null
        livenessProbe:
          exec:
            command:
            - ls
            - /
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 250m
        readinessProbe:
          exec:
            command:
            - ls
            - /
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: plugins-install-dir
        emptyDir: {}
      - name: rulesfiles-install-dir
        emptyDir: {}
      - name: root-falco-fs
        emptyDir: {}
      - name: falcoctl-config-volume
        configMap:
          name: release-name-falco-falcoctl
          items:
          - key: falcoctl.yaml
            path: falcoctl.yaml
      - name: falco-yaml
        configMap:
          name: release-name-falco
          items:
          - key: falco.yaml
            path: falco.yaml
      securityContext:
        seccompProfile:
          type: RuntimeDefault
  updateStrategy:
    type: RollingUpdate
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: test-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
