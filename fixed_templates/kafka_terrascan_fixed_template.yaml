apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-kafka
  namespace: default
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-22.1.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
  annotations: null
automountServiceAccountToken: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-kafka-scripts
  namespace: default
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-22.1.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  setup.sh: "#!/bin/bash\n\nID=\"${MY_POD_NAME#\"release-name-kafka-\"}\"\n# If process.roles\
    \ is not set at all, it is assumed to be in ZooKeeper mode.\n# https://kafka.apache.org/documentation/#kraft_role\n\
    \nif [[ -f \"/bitnami/kafka/data/meta.properties\" ]]; then\n    if [[ $KAFKA_CFG_PROCESS_ROLES\
    \ == \"\" ]]; then\n        export KAFKA_CFG_BROKER_ID=\"$(grep \"broker.id\"\
    \ \"/bitnami/kafka/data/meta.properties\" | awk -F '=' '{print $2}')\"\n    else\n\
    \        export KAFKA_CFG_NODE_ID=\"$(grep \"node.id\" \"/bitnami/kafka/data/meta.properties\"\
    \ | awk -F '=' '{print $2}')\"\n    fi\nelse\n    if [[ $KAFKA_CFG_PROCESS_ROLES\
    \ == \"\" ]]; then\n        export KAFKA_CFG_BROKER_ID=\"$((ID + 0))\"\n    else\n\
    \        export KAFKA_CFG_NODE_ID=\"$((ID + 0))\"\n    fi\nfi\n\nif [[ $KAFKA_CFG_PROCESS_ROLES\
    \ == *\"controller\"* && -z $KAFKA_CFG_CONTROLLER_QUORUM_VOTERS ]]; then\n   \
    \ node_id=0\n    pod_id=0\n    while :\n    do\n        VOTERS=\"${VOTERS}$node_id@release-name-kafka-$pod_id.release-name-kafka-headless.default.svc.cluster.local:9093\"\
    \n        node_id=$(( $node_id + 1 ))\n        pod_id=$(( $pod_id + 1 ))\n   \
    \     if [[ $pod_id -ge 1 ]]; then\n            break\n        else\n        \
    \    VOTERS=\"$VOTERS,\"\n        fi\n    done\n    export KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=$VOTERS\n\
    fi\n\n# Configure zookeeper client\n\nexec /entrypoint.sh /run.sh"
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-kafka-headless
  namespace: default
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-22.1.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: false
  ports:
  - name: tcp-client
    port: 9092
    protocol: TCP
    targetPort: kafka-client
  - name: tcp-internal
    port: 9094
    protocol: TCP
    targetPort: kafka-internal
  - name: tcp-controller
    protocol: TCP
    port: 9093
    targetPort: kafka-ctlr
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-kafka
  namespace: default
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-22.1.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: tcp-client
    port: 9092
    protocol: TCP
    targetPort: kafka-client
    nodePort: null
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-kafka
  namespace: test-ns
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-22.1.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: kafka
  serviceName: release-name-kafka-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-22.1.5
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: kafka
      annotations:
        container.apparmor.security.beta.kubernetes.io/kafka: runtime/default
    spec:
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: kafka
                  app.kubernetes.io/instance: release-name
                  app.kubernetes.io/component: kafka
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: release-name-kafka
      containers:
      - name: kafka
        image: docker.io/bitnami/kafka:3.4.1-debian-11-r0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          readOnlyRootFilesystem: true
        command:
        - /scripts/setup.sh
        env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: null
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: INTERNAL
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT
        - name: KAFKA_CFG_LISTENERS
          value: INTERNAL://:9094,CLIENT://:9092,CONTROLLER://:9093
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: INTERNAL://$(MY_POD_NAME).release-name-kafka-headless.default.svc.cluster.local:9094,CLIENT://$(MY_POD_NAME).release-name-kafka-headless.default.svc.cluster.local:9092
        - name: ALLOW_PLAINTEXT_LISTENER
          value: 'yes'
        - name: KAFKA_ZOOKEEPER_PROTOCOL
          value: PLAINTEXT
        - name: KAFKA_VOLUME_DIR
          value: /bitnami/kafka
        - name: KAFKA_LOG_DIR
          value: /opt/bitnami/kafka/logs
        - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
          value: 'false'
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: 'true'
        - name: KAFKA_HEAP_OPTS
          value: -Xmx1024m -Xms1024m
        - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
          value: '10000'
        - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
          value: '1000'
        - name: KAFKA_CFG_LOG_RETENTION_BYTES
          value: '1073741824'
        - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS
          value: '300000'
        - name: KAFKA_CFG_LOG_RETENTION_HOURS
          value: '168'
        - name: KAFKA_CFG_MESSAGE_MAX_BYTES
          value: '1000012'
        - name: KAFKA_CFG_LOG_SEGMENT_BYTES
          value: '1073741824'
        - name: KAFKA_CFG_LOG_DIRS
          value: /bitnami/kafka/data
        - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
          value: '1'
        - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: '1'
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: '1'
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
          value: '1'
        - name: KAFKA_CFG_NUM_IO_THREADS
          value: '8'
        - name: KAFKA_CFG_NUM_NETWORK_THREADS
          value: '3'
        - name: KAFKA_CFG_NUM_PARTITIONS
          value: '1'
        - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
          value: '1'
        - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
          value: '102400'
        - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
          value: '104857600'
        - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
          value: '102400'
        - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
          value: '6000'
        - name: KAFKA_CFG_AUTHORIZER_CLASS_NAME
          value: ''
        - name: KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND
          value: 'true'
        - name: KAFKA_CFG_SUPER_USERS
          value: User:admin
        - name: KAFKA_ENABLE_KRAFT
          value: 'true'
        - name: KAFKA_KRAFT_CLUSTER_ID
          value: kafka_cluster_id_test1
        - name: KAFKA_CFG_PROCESS_ROLES
          value: broker,controller
        - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
          value: CONTROLLER
        ports:
        - name: kafka-client
          containerPort: 9092
        - name: kafka-internal
          containerPort: 9094
        - name: kafka-ctlr
          containerPort: 9093
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: kafka-client
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: kafka-client
        resources:
          limits:
            memory: 128Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 250m
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
        - name: logs
          mountPath: /opt/bitnami/kafka/logs
        - name: scripts
          mountPath: /scripts/setup.sh
          subPath: setup.sh
        - name: secret-volume
          readOnly: true
          mountPath: /etc/secret-volume
      volumes:
      - name: scripts
        configMap:
          name: release-name-kafka-scripts
          defaultMode: 493
      - name: logs
        emptyDir: {}
      - name: secret-volume
        secret:
          secretName: my-secret
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
