name: Run SonarCloud

on:
  workflow_call:
    inputs:

      iteration:
        required: true
        type: string

      chart_folder:
        required: true
        type: string
    
    secrets:
      
        SONAR_TOKEN: 
          description: 'SonarCloud API token'
          required: true

jobs:

  run_sonarcloud:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'main'

      - name: Define template chart folder - original
        if: ${{ inputs.iteration == '1'}}
        run: echo "TEMPLATE=templates/${{ inputs.chart_folder }}_template.yaml" >> $GITHUB_ENV

      - name: Define template chart folder - fixed
        if: ${{ inputs.iteration == '2'}}
        run: echo "TEMPLATE=fixed_templates/${{ inputs.chart_folder }}_${{ inputs.first_tool }}_fixed_template.yaml" >> $GITHUB_ENV

      - name: Define template chart folder - functionalities
        if: ${{ inputs.iteration == '3'}}
        run: echo "TEMPLATE=functionality_templates/${{ inputs.chart_folder }}_func_template.yaml" >> $GITHUB_ENV

      - name: Create sonar-project.properties
        shell: bash
        run: |
          echo "sonar.organization=aristsimidakis" > ${{ inputs.chart_folder }}/sonar-project.properties
          echo "sonar.projectKey=ArisTsimidakis_mycharts" >> ${{ inputs.chart_folder }}/sonar-project.properties
          echo "sonar.projectName=mycharts" >> ${{ inputs.chart_folder }}/sonar-project.properties


      - name: Run SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3.1
        with:
          fetch-depth: 0
          projectBaseDir: ${{ inputs.chart_folder }} 
          args: >
            -Dsonar.verbose=true
            -Dsonar.log_level=DEBUG
            -Dsonar.scanner.dumpToFile=sonar-scanner-dump.log
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Fetch SonarCloud Report
        shell: bash
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY="ArisTsimidakis_mycharts"
          METRIC_KEYS="alert_status%2Cncloc%2Cncloc_language_distribution%2Cprojects%2Cnew_lines%2Cnew_accepted_issues%2Cnew_bugs%2Cnew_reliability_rating%2Cnew_vulnerabilities%2Cnew_security_rating%2Cnew_security_hotspots%2Cnew_security_review_rating%2C%20new_security_hotspots_reviewed%2Cnew_code_smells%2Cnew_maintainability_rating%2Cnew_technical_debt%2Cnew_coverage%2C%20new_lines_to_cover%2Cnew_duplicated_lines_density%2Cnew_lines%2Ccoverage%2Cduplicated_lines_density%2Cnew_violations%2Caccepted_issues%2Cbugs%2Creliability_rating%2Cvulnerabilities%2Csecurity_rating%2Csecurity_hotspots%2Csecurity_review_rating%2Csecurity_hotspots_reviewed%2Ccode_smells%2Csqale_rating%2Ccoverage%2Clines_to_cover%2Cduplicated_lines_density%2Clines%2Cviolations%2Cmaintainability_issues%2Csecurity_issues%2Creliability_issues"
          SONAR_API="https://sonarcloud.io/api/measures/component?metricKeys=$METRIC_KEYS&component=$PROJECT_KEY"

          curl --request GET --url $SONAR_API --header 'Authorization: Bearer $SONAR_TOKEN' 
      
      - name: Print SonarCloud result
        shell: bash
        run: jq . results_${{ inputs.iteration }}.json

      - name: Upload the JASON results artifact
        uses: actions/upload-artifact@v4
        with:
          name: results_${{ inputs.iteration }}
          path: results_${{ inputs.iteration }}.json
          if-no-files-found: error
      
      - name: Clean up sonar-project.properties
        shell: bash
        run: rm ${{ inputs.chart_folder }}/sonar-project.properties


      
